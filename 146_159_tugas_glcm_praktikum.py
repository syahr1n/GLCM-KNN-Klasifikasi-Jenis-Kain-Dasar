# -*- coding: utf-8 -*-
"""146-159-Tugas GLCM Praktikum

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDdU2-3h5_rPwPbZlNWa9inIogoikraZ

**Nama Anggota :**
1. Laili Athiyyah - 065122146
2. Syahrina Aryani D. - 065122159

**Tugas Pengolahan Citra**

---


**Link Sumber Data :** https://www.kaggle.com/datasets/orchit/the-fabrics-dataset-by-ibug

---


# **IMPLEMENTASI EKSTRAKSI FITUR MENGGUNAKAN GRAYLEVEL CO-OCCURRENCE MATRICES (GLCM) DAN K-NEAREST NEIGHBOR (K-NN) UNTUK KLASIFIKASI JENIS KAIN DASAR**



---

# **Import Library dan Dataset**

**Import Library**
"""

import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tqdm import tqdm
from skimage.feature import graycomatrix, graycoprops
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, accuracy_score
from IPython.display import display
import warnings
warnings.filterwarnings("ignore")

"""**Path Dataset dan Parameter**"""

dataset_path = '/content/dataset_kain'
output_path = '/content/preprocessed_kain_clahe'
os.makedirs(output_path, exist_ok=True)

# Daftar nama kelas
classes = ['denim', 'katun', 'polyester', 'satin', 'wool']

# Ukuran resize gambar
resize_size = (256, 256)

"""#**Preprocessing**

**Fungsi Preprocessing**
"""

def preprocess_image_clahe(image):
    image_resized = cv2.resize(image, resize_size)
    gray = cv2.cvtColor(image_resized, cv2.COLOR_BGR2GRAY)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    gray_clahe = clahe.apply(gray)
    return gray_clahe

"""**Proses Preprocessing dan Simpan Hasil Preprocessing**"""

for label in classes:
    os.makedirs(os.path.join(output_path, label), exist_ok=True)
    folder_path = os.path.join(dataset_path, label)
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        img = cv2.imread(file_path)
        if img is None:
            print(f'Gagal baca {file_path}')
            continue
        img_processed = preprocess_image_clahe(img)
        save_path = os.path.join(output_path, label, filename)
        cv2.imwrite(save_path, img_processed)

print("Preprocessing dengan CLAHE selesai.")

"""**Tampilkan Hasil Preprocessing**"""

original_image_path = os.path.join(dataset_path, 'polyester', os.listdir(os.path.join(dataset_path, 'polyester'))[0])
preprocessed_image_path = os.path.join(output_path, 'polyester', os.listdir(os.path.join(output_path, 'polyester'))[0])

original_image = cv2.imread(original_image_path)
original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
preprocessed_image = cv2.imread(preprocessed_image_path, cv2.IMREAD_GRAYSCALE)

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(original_image)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Preprocessed Image')
plt.imshow(preprocessed_image, cmap='gray')
plt.axis('off')

plt.show()

"""# **Ekstraksi Fitur GLCM**

**Parameter GLCM**
"""

preprocessed_path = '/content/preprocessed_kain_clahe'
distances = [1]
angles = [0, np.pi/4, np.pi/2, 3*np.pi/4]
properties = ['ASM', 'contrast', 'homogeneity', 'correlation', 'dissimilarity', 'energy']

"""**Ekstraksi Fitur GLCM**"""

# List untuk Menyimpan Hasil
data = []
labels = []

# Proses Ekstraksi Fitur GLCM
print("Proses ekstraksi fitur GLCM...")

for label in classes:
    folder_path = os.path.join(preprocessed_path, label)
    for filename in tqdm(os.listdir(folder_path)):
        file_path = os.path.join(folder_path, filename)
        image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)

        glcm = graycomatrix(image, distances=distances, angles=angles, symmetric=True, normed=True)

        features = []
        for prop in properties:
            values = graycoprops(glcm, prop)
            features.extend(values.flatten())

        data.append(features)
        labels.append(label)

print("Ekstraksi fitur selesai.")

"""**Tampilkan Tabel Hasil Ekstraksi Fitur GLCM**"""

# Konversi ke DataFrame
columns = []
for prop in properties:
    for angle in ['0°', '45°', '90°', '135°']:
        columns.append(f'{prop}_{angle}')

df_features = pd.DataFrame(data, columns=columns)
df_features['label'] = labels

# Tampilkan Tabel Hasil Ekstraksi
styled_table = df_features.style\
    .background_gradient(cmap='YlOrRd', axis=0, subset=columns)\
    .set_caption("📊 Tabel 10 Data Hasil Ekstraksi Fitur GLCM per Citra Kain")\
    .set_properties(**{'text-align': 'center'})\
    .set_table_styles([
        {'selector': 'th', 'props': [('font-weight', 'bold'), ('text-align', 'center'), ('background-color', '#f2f2f2')]},
        {'selector': 'caption', 'props': [('caption-side', 'top'), ('font-size', '16px'), ('font-weight', 'bold')]}
    ])\
    .format(precision=5, na_rep='-')

display(styled_table)

"""**Info Dataset dan Simpan ke CSV**"""

print(f"\nTotal data: {len(df_features)} gambar")
print("\nDistribusi tiap kelas:")
print(df_features['label'].value_counts())

df_features.to_csv('/content/glcm_features.csv', index=False)
print("\nHasil fitur disimpan ke /content/glcm_features.csv")

"""# **Klasifikasi K-NN**

**Split Data dan Definisikan Label dan Fitur**
"""

# Data fitur dan label
X = df_features.iloc[:, :-1].values
y = df_features['label'].values

# Split data 80:20 dengan stratify
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=41)

"""**Standarisasi, PCA, dan K-NN**"""

# Pipeline preprocessing + PCA + KNN
pipe = Pipeline([
    ('scaler', StandardScaler()),
    ('pca', PCA()),
    ('knn', KNeighborsClassifier())
])

"""**Tentukan Parameter Grid untuk GridSearch**"""

# Tentukan max komponen PCA agar tidak melebihi jumlah sample & fitur
max_pca = min(24, X_train.shape[0], X_train.shape[1])

# Parameter grid untuk GridSearch (metric euclidean saja)
param_grid = {
    'pca__n_components': [n for n in [5, 10, 15, 20] if n <= max_pca],
    'knn__n_neighbors': list(range(1, 16, 2)),
    'knn__weights': ['uniform', 'distance'],
    'knn__metric': ['euclidean']
}

"""**Grid Search dan Training**"""

# GridSearch dengan cross-validation 5-fold
grid = GridSearchCV(pipe, param_grid, cv=5, scoring='accuracy', n_jobs=-1, verbose=2)

# Fit model
grid.fit(X_train, y_train)

"""**Evaluasi Model**"""

# Hasil terbaik
print("Best parameters:", grid.best_params_)
print("Best cross-validation accuracy:", grid.best_score_)

# Evaluasi di data test
y_pred = grid.predict(X_test)
print("Test accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

import gradio as gr
import pandas as pd

# --- Fungsi bantu ---
best_model = grid.best_estimator_

def rotate_image(image, angle):
    h, w = image.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    rotated = cv2.warpAffine(image, M, (w, h))
    return rotated

def adjust_brightness_contrast(image, brightness=0, contrast=1.0):
    image = np.clip(image.astype(np.float32) * contrast + brightness, 0, 255).astype(np.uint8)
    return image

def extract_glcm_features_from_image(image_input):
    try:
        image_resized = cv2.resize(image_input, resize_size)
        gray = cv2.cvtColor(image_resized, cv2.COLOR_BGR2GRAY)
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        gray_clahe = clahe.apply(gray)

        glcm = graycomatrix(gray_clahe, distances=distances, angles=angles, symmetric=True, normed=True)

        features = []
        columns = []
        angle_labels = ['0°', '45°', '90°', '135°']
        for i, prop in enumerate(properties):
            values = graycoprops(glcm, prop)
            for j, angle_label in enumerate(angle_labels):
                features.append(values[0, j])
                columns.append(f"{prop}_{angle_label}")

        df = pd.DataFrame([features], columns=columns)
        return np.array(features).reshape(1, -1), gray, gray_clahe, df
    except Exception as e:
        print("Error:", e)
        return None, None, None, None

def predict_fabric(image, angle, brightness, contrast, apply_median):
    image_np = np.array(image)

    image_transformed = rotate_image(image_np, angle)
    image_transformed = adjust_brightness_contrast(image_transformed, brightness, contrast)
    if apply_median:
        image_transformed = cv2.medianBlur(image_transformed, 3)

    feature_vector, grayscale, clahe_image, feature_df = extract_glcm_features_from_image(image_transformed)
    if feature_vector is None:
        return "Error saat ekstraksi fitur", None, None, image_transformed, pd.DataFrame()

    pred = best_model.predict(feature_vector)[0]
    return f"✅ Jenis kain: {pred.upper()}", grayscale, clahe_image, image_transformed, feature_df

# --- Komponen ---
with gr.Blocks(css="""
    .gradio-container {
        background-color: #ffe6f0;;
    }

    .section-box {
        border: 2px solid #ccc;
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
        box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.1);
    }
    #output-label label{
        font-size: 15px;
        font-weight: bold;
    }
    .center-text {
        text-align: center;
    }

""") as interface:
    gr.Markdown("<h1 class='center-text'>🎨 Sistem Klasifikasi Kain Dasar dengan GLCM dan KNN</h1>")

    with gr.Row(elem_classes=["section-box"]):
        gr.Markdown("""
        ### 📌 Langkah-langkah Penggunaan:
        1. Unggah gambar kain melalui form di bawah.
        2. Sesuaikan rotasi, brightness, contrast, dan filter median jika diperlukan.
        3. Tekan tombol **Submit** untuk memproses dan mengklasifikasikan.
        4. Tekan tombol **Clear** untuk menghapus input dan output.
        """)

    with gr.Row(elem_classes=["section-box"]):
        with gr.Column():
            input_image = gr.Image(type="pil", label="Unggah Gambar Kain", elem_id="output-label")
            rotation_dropdown = gr.Dropdown(choices=[-180, -90, 0, 90, 180], value=0, label="🔄 Rotasi (derajat)")
            brightness_slider = gr.Slider(-100, 100, value=0, step=1, label="💡 Brightness")
            contrast_slider = gr.Slider(0.5, 2.0, value=1.0, step=0.1, label="🎚️ Contrast")
            median_filter_checkbox = gr.Checkbox(label="🧹 Gunakan Filter Median")
            submit_btn = gr.Button("Submit")
            clear_btn = gr.Button("Clear")

        with gr.Column():
            output_label = gr.Label(label="Prediksi Jenis Kain", elem_id="output-label")
            output_gray = gr.Image(label="Grayscale Image", elem_id="output-label")
            output_clahe = gr.Image(label="CLAHE Image", elem_id="output-label")
            output_final = gr.Image(label="Gambar Setelah Transformasi", elem_id="output-label")

    with gr.Row(elem_classes=["section-box"]):
        output_table = gr.Dataframe(label="Tabel Fitur GLCM")

    # --- Events ---
    def submit_action(image, angle, brightness, contrast, apply_median):
        return predict_fabric(image, angle, brightness, contrast, apply_median)

    submit_btn.click(
        fn=submit_action,
        inputs=[input_image, rotation_dropdown, brightness_slider, contrast_slider, median_filter_checkbox],
        outputs=[output_label, output_gray, output_clahe, output_final, output_table]
    )

    clear_btn.click(
        fn=lambda: [None, 0, 0, 1.0, False, None, None, None, None, pd.DataFrame()],
        inputs=[],
        outputs=[input_image, rotation_dropdown, brightness_slider, contrast_slider, median_filter_checkbox,
                output_label, output_gray, output_clahe, output_final, output_table]
    )

    # --- Copyright ---
    with gr.Row():
        gr.Markdown("<p style='text-align:center; font-size:14px; color:#666;'>© 2025 Sistem Klasifikasi Kain Dasar - Dibuat oleh Laili Athiyyah & Syahrina Aryani Desti</p>")

interface.launch(share=True)

